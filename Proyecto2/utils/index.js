const fs = require('fs');

module.exports.isCocolKeyword = (word) => {
  const keyWords = [
    'ANY',
    'CHARACTERS',
    'COMMENTS',
    'COMPILER',
    'CONTEXT',
    'END',
    'FROM',
    'IF',
    'IGNORE',
    'IGNORECASE',
    'KEYWORDS',
    'NESTED',
    'PRAGMAS',
    'PRODUCTIONS',
    'SYNC',
    'TO',
    'TOKENS',
    'WEAK',
  ];

  return keyWords.includes(word);
};

module.exports.isSet = (variable) => {
  if (typeof variable === 'string') {
    return variable.trim().length > 0;
  }

  try {
    return (typeof variable !== 'undefined' && variable != null);
  } catch (err) {
    return false;
  }
};

module.exports.extractFromDoubleQuote = (str) => {
  const matches = str.match(/"(.*?)"/);
  return matches
    ? { found: true, value: matches[1] }
    : { found: false, value: str };
};

module.exports.replaceAll = (str, find, replace) => {
  const escapeRegExp = (string) => string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
  return str.replace(new RegExp(escapeRegExp(find), 'g'), replace);
};

module.exports.createFileLexer = (filePath, keyWords, tokens) => {
  const fileContent = `/** **** FILE AUTOGENERATED ***** */

const { RegParser } = require('../lib/FAClasses');
const { TOKEN_TYPE } = require('../lib/constants');
const LexicalAnalyzer = require('../lib/LexerClass/LexicalAnalyzer');

const filePath = process.argv.slice(2)[0];

const keyWordsRegEx = ${JSON.stringify(keyWords)};
const tokensRegEx = ${JSON.stringify(tokens)};

// Create keyWords DFA
const keyWordsFSM = keyWordsRegEx.map((keyWord) => {
  const parser = new RegParser(keyWord.value);
  const { nfa } = parser.parseToNFA();
  const { dfa } = nfa.toDFA();

  return {
    name: keyWord.name,
    fsm: dfa,
  };
});

// Create tokens DFA
const tokensFSM = tokensRegEx.map((keyWord) => {
  const parser = new RegParser(keyWord.value);
  const { nfa } = parser.parseToNFA();
  const { dfa } = nfa.toDFA();

  return {
    name: keyWord.name,
    fsm: dfa,
  };
});

// Build Lexer
const lexer = new LexicalAnalyzer(filePath, keyWordsFSM, tokensFSM);

let token = lexer.nextToken();

while (token !== TOKEN_TYPE.END) {
  console.log(token);
  token = lexer.nextToken();
}
`;

  fs.writeFileSync(filePath, fileContent);
};
